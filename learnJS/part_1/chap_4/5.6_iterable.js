'use strict'

let obj1 = {
  name: 'Igor',
  age: 29,
  city: 'Saint-Petersburg'
};

for (let values of obj1) {
  console.log(values); // TypeError: obj1 is not iterable
}

// fix with  [Symbol.iterator]()
const nums = {
  from: 0,
  to: 10,
  [Symbol.iterator]() {
    return {
      current: this.from,
      last: this.to,
      next() {
        return {
          done: this.current > this.last,
          value: this.current++,
        }
      }
    }
  }
}

for(const num of nums) {
  console.log(num); // 1, 2, 3, 4, 5 ... 10
}

// object 
let obj = {
  name: 'Igor',
  age: 29,
  city: 'Saint-Petersburg'
};

//1. –≤—ã–∑–æ–≤ for...of –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
obj[Symbol.iterator] = function() {
  // ...–æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞:
  // 2. –î–∞–ª–µ–µ, for..of —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è —É –Ω–µ–≥–æ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  return {
      start: 0,
      end: Object.values(this),
      // 3. next() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ for..of
      next() {
          // 4. –æ–Ω –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ {done:.., value :...}
          if(this.start < this.end.length){
              return {done: false, value: this.end[this.start++]}
          }
          return {done: true}
      }
  };
};

for (let values of obj) {
  console.log(values); // Igor, 29, Saint-Petersburg
}

// —Å—Ç—Ä–æ–∫–∞ - –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç
const str = 'Abobus üÖ∞Ô∏èüÖ±Ô∏èüÖæÔ∏èüÖ±Ô∏èüÖ∞Ô∏è'
for (let char of str) {
  console.log(char); // a, b...üÖ±Ô∏èüÖ∞Ô∏è
}

//manual iteration
const strGreeting = 'Hello'

let iterator = strGreeting[Symbol.iterator]();

while (true) {
  let result = iterator.next();
  if(result.done) break;
  console.log(result.value); // H, e, l, l, o
}

// –ü—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Symbol.iterator
let arrayLike = {
  name: 'Igor',
  city: 'Saint-Petersburg',
  length: 2,
}

for (let item of arrayLike) {} // TypeError: arrayLike is not iterable

function makeIterator(array) {
  let nextIndex = 0

  return {
    next: function () {
      if (nextIndex < array.length) {
        const result = { value: array[nextIndex], done: false }
        nextIndex++
        return result
      } else {
        return { done: true }
      }
    }
  }
}
let iterator = makeIterator(['Hello', 'world'])
console.log(iterator.next().value)
// 'Hello'
console.log(iterator.next().value)
// 'world'
console.log(iterator.next().done)
// true

// –ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–±—ä–µ–∫—Ç–æ–º –∫–∞–∫ —Å –º–∞—Å—Å–∏–≤–æ–º - Array.from(arrayLike[, mapFn[, thisArg]])
let arrayLike2 = {
  0: 'Igor',
  1: 'Saint-Petersburg',
  length: 2,
}

let NowYouAreAnArray = Array.from(arrayLike2);
console.log(NowYouAreAnArray.pop()); // 'Saint-Petersburg'

// mapFn —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
let arrayLike3 = {
  0: 'Igor',
  1: 'Saint-Petersburg',
  length: 2,
}

let nowYouAreAnArray = Array.from(arrayLike3, str => str.toUpperCase());
console.log(nowYouAreAnArray); // [ 'IGOR', 'SAINT-PETERSBURG' ]

Array.from() // TypeError: undefined is not iterable (cannot read property Symbol(Symbol.iterator))